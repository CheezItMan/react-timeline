{"version":3,"sources":["logo.svg","components/Timestamp.js","components/TimelineEvent.js","components/Timeline.js","App.js","serviceWorker.js","index.js"],"names":["Timestamp","props","time","moment","absolute","format","relative","fromNow","title","TimelineEvent","className","person","status","Timeline","events","map","event","timeStamp","App","console","log","timelineData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4+CAAe,I,iDCaAA,EAVG,SAACC,GACjB,IAAMC,EAAOC,IAAOF,EAAMC,MACpBE,EAAWF,EAAKG,OAAO,2BACvBC,EAAWJ,EAAKK,UAEtB,OACE,sBAAMC,MAAOJ,EAAb,SAAwBE,KCQbG,EAbO,SAACR,GACrB,OACE,0BAASS,UAAU,iBAAnB,UACE,mBAAGA,UAAU,eAAb,SAA6BT,EAAMU,SACnC,mBAAGD,UAAU,eAAb,SAA6BT,EAAMW,SACnC,mBAAGF,UAAU,aAAb,SACE,cAAC,EAAD,CAAWR,KAAMD,EAAMC,aCUhBW,EAhBE,SAACZ,GAChB,IAAMa,EAASb,EAAMa,OAAOC,KAAI,SAACC,GAC/B,OAAQ,cAAC,EAAD,CAENL,OAAQK,EAAML,OACdC,OAAQI,EAAMJ,OACdV,KAAMc,EAAMC,WAHPD,EAAMC,cAMf,OACE,yBAASP,UAAU,WAAnB,SACGI,KCOQI,MAhBf,WAIE,OAHAC,QAAQC,IAAIC,GAIV,sBAAKX,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,qBAAIA,UAAU,YAAd,UAA2BW,EAAaV,OAAxC,4BAEF,sBAAMD,UAAU,WAAhB,SACE,cAAC,EAAD,CAAUI,OAAQO,EAAaP,eCJnBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.83870f22.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.927f1d60.svg\";","import React from 'react';\nimport moment from 'moment';\n\nconst Timestamp = (props) => {\n  const time = moment(props.time);\n  const absolute = time.format('MMMM Do YYYY, h:mm:ss a');\n  const relative = time.fromNow();\n\n  return (\n    <span title={absolute}>{relative}</span>\n  );\n};\n\nexport default Timestamp;","import React from 'react';\nimport './TimelineEvent.css';\nimport Timestamp from './Timestamp';\n\nconst TimelineEvent = (props) => {\n  return (\n    <article className='timeline-event'>\n      <p className='event-person'>{props.person}</p>\n      <p className='event-status'>{props.status}</p>\n      <p className='event-time'>\n        <Timestamp time={props.time} />\n      </p>\n    </article>\n  );\n}\n\n\nexport default TimelineEvent;","import React from 'react';\nimport './Timeline.css';\nimport TimelineEvent from './TimelineEvent';\n\nconst Timeline = (props) => {\n  const events = props.events.map((event) => {\n    return (<TimelineEvent\n      key={event.timeStamp}\n      person={event.person}\n      status={event.status}\n      time={event.timeStamp} />);\n  });\n\n  return (\n    <section className='timeline'>\n      {events}\n    </section>\n  );\n};\n\nexport default Timeline;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport timelineData from './data/timeline.json';\nimport Timeline from './components/Timeline';\n\nfunction App () {\n  console.log(timelineData);\n\n  // Customize the code below\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">{timelineData.person}'s social media feed</h1>\n      </header>\n      <main className=\"App-main\">\n        <Timeline events={timelineData.events} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}